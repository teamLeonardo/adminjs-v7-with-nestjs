#!/bin/bash

# Script para manejar Docker con AdminJS y NestJS

case "$1" in
  "start")
    echo "üöÄ Iniciando servicios en modo PRODUCCI√ìN..."
    docker-compose up -d postgres app
    echo "‚úÖ Servicios de PRODUCCI√ìN iniciados!"
    echo "üìä AdminJS disponible en: http://localhost:3001/admin"
    echo "üîó API disponible en: http://localhost:3001"
    ;;
  "dev")
    echo "üöÄ Iniciando servicios en modo DESARROLLO..."
    docker-compose up -d postgres app-dev
    echo "‚úÖ Servicios de DESARROLLO iniciados!"
    echo "üìä AdminJS disponible en: http://localhost:3002/admin"
    echo "üîó API disponible en: http://localhost:3002"
    echo "üîÑ Hot-reload activado - los cambios se reflejar√°n autom√°ticamente"
    ;;
  "stop")
    echo "üõë Deteniendo todos los servicios..."
    docker-compose down
    echo "‚úÖ Servicios detenidos!"
    ;;
  "restart")
    echo "üîÑ Reiniciando servicios..."
    docker-compose down
    docker-compose up -d
    echo "‚úÖ Servicios reiniciados!"
    ;;
  "restart-dev")
    echo "üîÑ Reiniciando servicios de DESARROLLO..."
    docker-compose down
    docker-compose up -d app-dev
    echo "üßπ Limpiando node_modules dentro del contenedor app-dev..."
    docker-compose exec app-dev rm -rf node_modules
    echo "üì¶ Instalando dependencias dentro del contenedor app-dev..."
    docker-compose exec app-dev npm install
    echo "‚úÖ Servicios de DESARROLLO reiniciados!"
    ;;
  "logs")
    echo "üìã Mostrando logs..."
    docker-compose logs -f
    ;;
  "logs-dev")
    echo "üìã Mostrando logs de DESARROLLO..."
    docker-compose logs -f app-dev
    ;;
  "logs-prod")
    echo "üìã Mostrando logs de PRODUCCI√ìN..."
    docker-compose logs -f app
    ;;
  "build")
    echo "üî® Construyendo imagen..."
    docker-compose build
    echo "‚úÖ Imagen construida!"
    ;;
  "clean")
    echo "üßπ Limpiando contenedores y vol√∫menes..."
    docker-compose down -v
    docker system prune -f
    echo "‚úÖ Limpieza completada!"
    ;;
  "status")
    echo "üìä Estado de los servicios:"
    docker-compose ps
    ;;
  "prisma-init")
    echo "üü° Inicializando Prisma: migraciones y seed..."
    # Esperar a que postgres est√© disponible
    until docker-compose exec -T postgres pg_isready -U "$POSTGRES_USER" > /dev/null 2>&1; do
      echo "‚è≥ Esperando a que PostgreSQL est√© disponible..."
      sleep 2
    done
    echo "üî® Reconstruyendo imagen para asegurar que Prisma est√© disponible..."
    docker-compose build app
    echo "üîç Verificando si existen migraciones..."
    docker-compose run --rm app sh -c '[ -d prisma/migrations ] && [ "$(ls -A prisma/migrations)" ] || npx prisma migrate dev --name init --skip-seed'
    echo "‚úÖ PostgreSQL disponible. Ejecutando migraciones, generate y seed en un solo contenedor..."
    if docker-compose run --rm app sh -c "npx prisma migrate deploy && npx prisma generate && npx prisma db seed"; then
      echo "‚úÖ Migraciones, generate y seed completados."
    else
      echo "‚ùå Error al ejecutar migraciones, generate o seed."
      exit 1
    fi
    echo "‚úÖ Inicializaci√≥n de Prisma completada."
    ;;
  "prisma-clean")
    echo "‚ö†Ô∏è  Esto eliminar√° TODOS los datos de la base de datos y la reiniciar√° con migraciones y seed."
    read -p '¬øEst√°s seguro? (escribe "SI" para continuar): ' confirm
    if [ "$confirm" = "SI" ]; then
      echo "üî® Reconstruyendo imagen para asegurar que Prisma est√© disponible..."
      docker-compose build app
      echo "üîÑ Ejecutando reset de Prisma..."
      if docker-compose run --rm app npx prisma migrate reset --force; then
        echo "‚úÖ Base de datos limpiada y reinicializada."
      else
        echo "‚ùå Error al limpiar la base de datos."
        exit 1
      fi
    else
      echo "‚ùå Operaci√≥n cancelada."
    fi
    ;;
  *)
    echo "Uso: $0 {start|dev|stop|restart|restart-dev|logs|logs-dev|logs-prod|build|clean|status|prisma-init|prisma-clean}"
    echo ""
    echo "Comandos disponibles:"
    echo "  start        - Iniciar servicios en modo PRODUCCI√ìN (puerto 3001)"
    echo "  dev          - Iniciar servicios en modo DESARROLLO con hot-reload (puerto 3002)"
    echo "  stop         - Detener todos los servicios"
    echo "  restart      - Reiniciar todos los servicios"
    echo "  restart-dev  - Reiniciar solo servicios de DESARROLLO"
    echo "  logs         - Ver logs de todos los servicios"
    echo "  logs-dev     - Ver logs solo del modo DESARROLLO"
    echo "  logs-prod    - Ver logs solo del modo PRODUCCI√ìN"
    echo "  build        - Construir imagen"
    echo "  clean        - Limpiar contenedores y vol√∫menes"
    echo "  status       - Ver estado de los servicios"
    echo "  prisma-init  - Ejecutar migraciones y seed de Prisma (requiere postgres levantado)"
    echo "  prisma-clean - Eliminar todos los datos y reinicializar la base de datos (¬°DESTRUCTIVO!)"
    echo ""
    echo "URLs de acceso:"
    echo "  PRODUCCI√ìN:  http://localhost:3001/admin"
    echo "  DESARROLLO:  http://localhost:3002/admin"
    exit 1
    ;;
esac 